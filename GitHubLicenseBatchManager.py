import requests
import json
import base64
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import time

@dataclass
class LicenseResult:
    repo_name: str
    success: bool
    license_type: str
    message: str
    already_had_license: bool = False
    error: Optional[str] = None

class GitHubLicenseBatchManager:
    def __init__(self, token: str):
        self.token = token
        self.headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        self.base_url = 'https://api.github.com'
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        self.available_licenses = [
            'MIT', 'Apache-2.0', 'GPL-3.0', 'GPL-2.0', 'BSD-3-Clause',
            'BSD-2-Clause', 'ISC', 'LGPL-3.0', 'LGPL-2.1', 'Unlicense'
        ]
    
    def get_authenticated_user(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = f'{self.base_url}/user'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            user_data = response.json()
            return user_data.get('login')
        return None
    
    def get_user_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        url = f'{self.base_url}/user'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            return response.json()
        return None
    
    def get_my_repos(self, include_forks: bool = False) -> List[Tuple[str, str, Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = f'{self.base_url}/user/repos'
        params = {
            'type': 'all',
            'per_page': 100,
            'sort': 'updated',
            'direction': 'desc'
        }
        
        all_repos = []
        page = 1
        
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        
        while True:
            params['page'] = page
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {response.status_code}")
                break
            
            repos = response.json()
            if not repos:
                break
            
            for repo in repos:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not include_forks and repo.get('fork', False):
                    continue
                
                all_repos.append((repo['owner']['login'], repo['name'], repo))
            
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–∞–π–¥–µ–Ω–æ {len(repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
            page += 1
            
            if page > 100:
                break
        
        print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        return all_repos
    
    def check_existing_license(self, owner: str, repo: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
        url = f'{self.base_url}/repos/{owner}/{repo}'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            repo_data = response.json()
            api_license = repo_data.get('license')
            if api_license:
                return {
                    'source': 'api',
                    'license': api_license.get('name', 'Unknown'),
                    'key': api_license.get('key', '')
                }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
        license_files = ['LICENSE', 'LICENSE.txt', 'LICENSE.md', 'LICENCE', 'COPYING']
        
        for license_file in license_files:
            file_url = f'{self.base_url}/repos/{owner}/{repo}/contents/{license_file}'
            file_response = requests.get(file_url, headers=self.headers)
            
            if file_response.status_code == 200:
                return {
                    'source': 'file',
                    'license': 'Unknown (file exists)',
                    'file': license_file
                }
        
        return None
    
    def get_license_template(self, license_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        url = f'{self.base_url}/licenses/{license_key}'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            return response.json()['body']
        return None
    
    def prepare_license_content(self, license_key: str, author_name: str = None, 
                               author_email: str = None, year: int = None) -> Optional[str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –∑–∞–º–µ–Ω–æ–π placeholders"""
        license_content = self.get_license_template(license_key)
        if not license_content:
            return None
        
        # –ó–∞–º–µ–Ω–∞ placeholders
        current_year = year or datetime.now().year
        
        replacements = {
            '[year]': str(current_year),
            '[yyyy]': str(current_year),
            '[fullname]': author_name or 'Author',
            '[name of copyright owner]': author_name or 'Author',
            '[email]': author_email or 'author@example.com'
        }
        
        for placeholder, replacement in replacements.items():
            license_content = license_content.replace(placeholder, replacement)
        
        return license_content
    
    def add_license_to_repo(self, owner: str, repo: str, license_key: str,
                           author_name: str = None, author_email: str = None,
                           force: bool = False) -> LicenseResult:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        repo_full_name = f"{owner}/{repo}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏
        existing_license = self.check_existing_license(owner, repo)
        if existing_license and not force:
            return LicenseResult(
                repo_name=repo_full_name,
                success=False,
                license_type=existing_license['license'],
                message=f"–õ–∏—Ü–µ–Ω–∑–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_license['license']}",
                already_had_license=True
            )
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–∏
        license_content = self.prepare_license_content(license_key, author_name, author_email)
        if not license_content:
            return LicenseResult(
                repo_name=repo_full_name,
                success=False,
                license_type=license_key,
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ª–∏—Ü–µ–Ω–∑–∏–∏",
                error="Template not found"
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ LICENSE
        url = f'{self.base_url}/repos/{owner}/{repo}/contents/LICENSE'
        
        content_encoded = base64.b64encode(license_content.encode('utf-8')).decode('utf-8')
        
        data = {
            'message': f'Add {license_key} license',
            'content': content_encoded,
            'committer': {
                'name': author_name or 'GitHub API',
                'email': author_email or 'noreply@github.com'
            }
        }
        
        response = requests.put(url, headers=self.headers, json=data)
        
        if response.status_code == 201:
            return LicenseResult(
                repo_name=repo_full_name,
                success=True,
                license_type=license_key,
                message="–õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            )
        else:
            error_msg = "Unknown error"
            if response.status_code == 409:
                error_msg = "–§–∞–π–ª LICENSE —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            elif response.status_code == 403:
                error_msg = "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
            elif response.status_code == 404:
                error_msg = "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            return LicenseResult(
                repo_name=repo_full_name,
                success=False,
                license_type=license_key,
                message=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {error_msg}",
                error=f"HTTP {response.status_code}"
            )
    
    def batch_add_licenses(self, license_key: str, author_name: str = None,
                          author_email: str = None, include_forks: bool = False,
                          force: bool = False, exclude_repos: List[str] = None,
                          include_only: List[str] = None) -> List[LicenseResult]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π –≤–æ –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        
        exclude_repos = exclude_repos or []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.get_user_info()
        if user_info and not author_name:
            author_name = user_info.get('name') or user_info.get('login')
        if user_info and not author_email:
            author_email = user_info.get('email')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        repos = self.get_my_repos(include_forks=include_forks)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        if include_only:
            repos = [(o, r, d) for o, r, d in repos if f"{o}/{r}" in include_only]
        
        repos = [(o, r, d) for o, r, d in repos if f"{o}/{r}" not in exclude_repos]
        
        if not repos:
            print("‚ùå –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key} –≤ {len(repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {author_name}")
        print(f"üìß Email: {author_email}")
        print(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–î–∞' if force else '–ù–µ—Ç'}")
        
        results = []
        
        for i, (owner, repo, repo_data) in enumerate(repos, 1):
            print(f"\n[{i}/{len(repos)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {owner}/{repo}...")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            if i > 1:
                time.sleep(1)
            
            result = self.add_license_to_repo(
                owner, repo, license_key, author_name, author_email, force
            )
            
            results.append(result)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result.success:
                print(f"‚úÖ {result.message}")
            elif result.already_had_license:
                print(f"‚ö†Ô∏è {result.message}")
            else:
                print(f"‚ùå {result.message}")
        
        return results
    
    def interactive_batch_setup(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ batch –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π"""
        print("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.get_user_info()
        if not user_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
        
        username = user_info.get('login')
        user_name = user_info.get('name') or username
        user_email = user_info.get('email')
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìù –ò–º—è: {user_name}")
        print(f"üìß Email: {user_email or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        
        # –í—ã–±–æ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏:")
        for i, license_type in enumerate(self.available_licenses, 1):
            print(f"{i}. {license_type}")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é (1-{len(self.available_licenses)}): ").strip()
                license_index = int(choice) - 1
                if 0 <= license_index < len(self.available_licenses):
                    selected_license = self.available_licenses[license_index]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∞
        custom_name = input(f"\n–ò–º—è –∞–≤—Ç–æ—Ä–∞ [{user_name}]: ").strip()
        author_name = custom_name if custom_name else user_name
        
        custom_email = input(f"Email –∞–≤—Ç–æ—Ä–∞ [{user_email or 'noreply@github.com'}]: ").strip()
        author_email = custom_email if custom_email else (user_email or 'noreply@github.com')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        include_forks = input("\n–í–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä–∫–∏? (y/n) [n]: ").strip().lower() in ['y', 'yes']
        force = input("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏? (y/n) [n]: ").strip().lower() in ['y', 'yes']
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        exclude_input = input("\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
        exclude_repos = [repo.strip() for repo in exclude_input.split(',') if repo.strip()]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –õ–∏—Ü–µ–Ω–∑–∏—è: {selected_license}")
        print(f"   –ê–≤—Ç–æ—Ä: {author_name}")
        print(f"   Email: {author_email}")
        print(f"   –í–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä–∫–∏: {'–î–∞' if include_forks else '–ù–µ—Ç'}")
        print(f"   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–î–∞' if force else '–ù–µ—Ç'}")
        print(f"   –ò—Å–∫–ª—é—á–∏—Ç—å: {', '.join(exclude_repos) if exclude_repos else '–ù–µ—Ç'}")
        
        confirm = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –ó–∞–ø—É—Å–∫ batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        results = self.batch_add_licenses(
            license_key=selected_license,
            author_name=author_name,
            author_email=author_email,
            include_forks=include_forks,
            force=force,
            exclude_repos=exclude_repos
        )
        
        # –û—Ç—á–µ—Ç
        self.print_batch_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        save_report = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª? (y/n): ").strip().lower()
        if save_report in ['y', 'yes']:
            self.save_batch_report(results, selected_license)
    
    def print_batch_report(self, results: List[LicenseResult]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ batch –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 80)
        print("üìä –û–¢–ß–ï–¢ –û –î–û–ë–ê–í–õ–ï–ù–ò–ò –õ–ò–¶–ï–ù–ó–ò–ô")
        print("=" * 80)
        
        successful = [r for r in results if r.success]
        already_licensed = [r for r in results if r.already_had_license]
        failed = [r for r in results if not r.success and not r.already_had_license]
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(successful)}")
        print(f"‚ö†Ô∏è –£–∂–µ –∏–º–µ–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é: {len(already_licensed)}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(successful) / len(results) * 100:.1f}%")
        
        if successful:
            print(f"\n{'='*20} –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û {'='*20}")
            for result in successful:
                print(f"‚úÖ {result.repo_name} - {result.license_type}")
        
        if already_licensed:
            print(f"\n{'='*20} –£–ñ–ï –ò–ú–ï–õ–ò –õ–ò–¶–ï–ù–ó–ò–Æ {'='*20}")
            for result in already_licensed:
                print(f"‚ö†Ô∏è {result.repo_name} - {result.license_type}")
        
        if failed:
            print(f"\n{'='*20} –û–®–ò–ë–ö–ò {'='*20}")
            for result in failed:
                print(f"‚ùå {result.repo_name} - {result.message}")
    
    def save_batch_report(self, results: List[LicenseResult], license_type: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"license_batch_report_{license_type}_{timestamp}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'license_type': license_type,
            'total_repos': len(results),
            'successful': len([r for r in results if r.success]),
            'already_licensed': len([r for r in results if r.already_had_license]),
            'failed': len([r for r in results if not r.success and not r.already_had_license]),
            'results': [
                {
                    'repo_name': r.repo_name,
                    'success': r.success,
                    'license_type': r.license_type,
                    'message': r.message,
                    'already_had_license': r.already_had_license,
                    'error': r.error
                }
                for r in results
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    GITHUB_TOKEN = "your_github_token_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    
    if GITHUB_TOKEN == "your_github_token_here":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à GitHub —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GITHUB_TOKEN")
        return
    
    license_manager = GitHubLicenseBatchManager(GITHUB_TOKEN)
    
    print("üöÄ GitHub License Batch Manager")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    username = license_manager.get_authenticated_user()
    if not username:
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    print(f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    license_manager.interactive_batch_setup()

def batch_example():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    GITHUB_TOKEN = "your_github_token_here"
    
    license_manager = GitHubLicenseBatchManager(GITHUB_TOKEN)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ MIT –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤–æ –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    results = license_manager.batch_add_licenses(
        license_key='MIT',
        author_name='Your Name',
        author_email='your.email@example.com',
        include_forks=False,
        force=False,
        exclude_repos=['username/sensitive-repo', 'username/old-project']
    )
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    license_manager.print_batch_report(results)

if __name__ == "__main__":
    main()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # batch_example()
