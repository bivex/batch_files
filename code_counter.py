#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
import sys
from pathlib import Path
from collections import defaultdict
import argparse


class CodeCounter:
    def __init__(self, project_path, exclude_dirs=None, exclude_files=None):
        self.project_path = Path(project_path)
        self.exclude_dirs = exclude_dirs or {
            '__pycache__', '.git', '.vscode', '.idea', 'venv', 'env', 
            'node_modules', '.pytest_cache', 'logs', 'photos', 'dbexport',
            'tests', 'docs', 'config_examples'
        }
        self.exclude_files = exclude_files or {
            '.gitignore', '.env', 'requirements.txt', '*.log', '*.db',
            '*.sql', '*.md', '*.txt', '*.bat', '*.sh', '*.service',
            '*.html', '*.backup'
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        self.code_extensions = {
            '.py': 'Python',
            '.js': 'JavaScript',
            '.ts': 'TypeScript',
            '.jsx': 'React JSX',
            '.tsx': 'React TSX',
            '.html': 'HTML',
            '.css': 'CSS',
            '.scss': 'SCSS',
            '.sql': 'SQL',
            '.json': 'JSON',
            '.xml': 'XML',
            '.yaml': 'YAML',
            '.yml': 'YAML',
            '.sh': 'Shell Script',
            '.bat': 'Batch Script',
            '.md': 'Markdown',
            '.txt': 'Text',
            '.cfg': 'Config',
            '.ini': 'Config',
            '.conf': 'Config'
        }
    
    def should_exclude_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞"""
        file_name = file_path.name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for exclude_pattern in self.exclude_files:
            if exclude_pattern.startswith('*'):
                if file_name.endswith(exclude_pattern[1:]):
                    return True
            elif file_name == exclude_pattern:
                return True
        
        return False
    
    def should_exclude_dir(self, dir_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞"""
        return dir_path.name in self.exclude_dirs
    
    def count_lines_in_file(self, file_path):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
                total_lines = len(lines)
                non_empty_lines = len([line for line in lines if line.strip()])
                return total_lines, non_empty_lines
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return 0, 0
    
    def scan_project(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = defaultdict(lambda: {
            'files': 0,
            'total_lines': 0,
            'non_empty_lines': 0,
            'file_list': []
        })
        
        total_files = 0
        total_lines = 0
        total_non_empty_lines = 0
        
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {self.project_path}")
        print("=" * 60)
        
        for root, dirs, files in os.walk(self.project_path):
            root_path = Path(root)
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not self.should_exclude_dir(Path(d))]
            
            for file in files:
                file_path = root_path / file
                
                # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã
                if self.should_exclude_file(file_path):
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                file_ext = file_path.suffix.lower()
                if file_ext in self.code_extensions:
                    file_type = self.code_extensions[file_ext]
                else:
                    file_type = 'Other'
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                lines, non_empty_lines = self.count_lines_in_file(file_path)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats[file_type]['files'] += 1
                stats[file_type]['total_lines'] += lines
                stats[file_type]['non_empty_lines'] += non_empty_lines
                stats[file_type]['file_list'].append({
                    'path': str(file_path.relative_to(self.project_path)),
                    'lines': lines,
                    'non_empty_lines': non_empty_lines
                })
                
                total_files += 1
                total_lines += lines
                total_non_empty_lines += non_empty_lines
        
        return stats, total_files, total_lines, total_non_empty_lines
    
    def print_statistics(self, stats, total_files, total_lines, total_non_empty_lines):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–î–ê")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìÅ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines:,}")
        print(f"‚ú® –°—Ç—Ä–æ–∫ —Å –∫–æ–¥–æ–º (–Ω–µ –ø—É—Å—Ç—ã–µ): {total_non_empty_lines:,}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {(total_non_empty_lines/total_lines*100):.1f}%" if total_lines > 0 else "0%")
        
        print("\nüìã –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:")
        print("-" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
        sorted_stats = sorted(stats.items(), key=lambda x: x[1]['total_lines'], reverse=True)
        
        for file_type, data in sorted_stats:
            if data['files'] > 0:
                avg_lines = data['total_lines'] / data['files']
                print(f"{file_type:15} | "
                      f"–§–∞–π–ª–æ–≤: {data['files']:4} | "
                      f"–°—Ç—Ä–æ–∫: {data['total_lines']:6,} | "
                      f"–ö–æ–¥: {data['non_empty_lines']:6,} | "
                      f"–°—Ä–µ–¥–Ω–µ–µ: {avg_lines:5.1f}")
        
        print("\nüîç –¢–û–ü-10 –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í:")
        print("-" * 60)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
        all_files = []
        for file_type, data in stats.items():
            for file_info in data['file_list']:
                all_files.append((file_info['path'], file_info['lines'], file_type))
        
        all_files.sort(key=lambda x: x[1], reverse=True)
        
        for i, (file_path, lines, file_type) in enumerate(all_files[:10], 1):
            print(f"{i:2}. {file_path:40} | {lines:5,} —Å—Ç—Ä–æ–∫ | {file_type}")
    
    def save_detailed_report(self, stats, filename="code_report.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        report_path = self.project_path / filename
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ö–û–î–£\n")
            f.write("=" * 60 + "\n\n")
            
            for file_type, data in stats.items():
                if data['files'] > 0:
                    f.write(f"\n{file_type.upper()}:\n")
                    f.write("-" * 40 + "\n")
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫
                    sorted_files = sorted(data['file_list'], key=lambda x: x['lines'], reverse=True)
                    
                    for file_info in sorted_files:
                        f.write(f"{file_info['path']:50} | "
                               f"{file_info['lines']:5,} —Å—Ç—Ä–æ–∫ | "
                               f"{file_info['non_empty_lines']:5,} –∫–æ–¥\n")
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")


def main():
    parser = argparse.ArgumentParser(description='–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ')
    parser.add_argument('path', nargs='?', default='.', 
                       help='–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)')
    parser.add_argument('--exclude-dirs', nargs='*', 
                       help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è')
    parser.add_argument('--exclude-files', nargs='*',
                       help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è')
    parser.add_argument('--report', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
    exclude_dirs = set(args.exclude_dirs) if args.exclude_dirs else None
    exclude_files = set(args.exclude_files) if args.exclude_files else None
    
    counter = CodeCounter(args.path, exclude_dirs, exclude_files)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    stats, total_files, total_lines, total_non_empty_lines = counter.scan_project()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    counter.print_statistics(stats, total_files, total_lines, total_non_empty_lines)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.report:
        counter.save_detailed_report(stats)


if __name__ == "__main__":
    main()
