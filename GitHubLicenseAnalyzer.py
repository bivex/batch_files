import requests
import json
import re
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

@dataclass
class LicenseInfo:
    has_license: bool
    license_type: Optional[str] = None
    license_file: Optional[str] = None
    confidence: str = "unknown"  # high, medium, low, unknown
    source: str = "none"  # api, file, readme, none

class GitHubLicenseAnalyzer:
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å GitHub —Ç–æ–∫–µ–Ω–æ–º
        """
        self.token = token
        self.headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        self.base_url = 'https://api.github.com'
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
        self.license_files = [
            'LICENSE', 'LICENSE.txt', 'LICENSE.md', 'LICENSE.rst',
            'LICENCE', 'LICENCE.txt', 'LICENCE.md', 'LICENCE.rst',
            'license', 'license.txt', 'license.md', 'license.rst',
            'licence', 'licence.txt', 'licence.md', 'licence.rst',
            'COPYING', 'COPYING.txt', 'COPYRIGHT', 'COPYRIGHT.txt'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π –≤ README
        self.license_patterns = [
            r'(?i)license[d]?\s*under\s*(?:the\s*)?([^,\n]+)',
            r'(?i)licensed\s*under\s*(?:the\s*)?([^,\n]+)',
            r'(?i)license:\s*([^,\n]+)',
            r'(?i)licence:\s*([^,\n]+)',
            r'(?i)##\s*license\s*\n\s*([^#\n]+)',
            r'(?i)##\s*licence\s*\n\s*([^#\n]+)',
            r'(?i)MIT\s*License',
            r'(?i)Apache\s*License',
            r'(?i)GNU\s*General\s*Public\s*License',
            r'(?i)BSD\s*License',
            r'(?i)GPL\s*License'
        ]

    def get_authenticated_user(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
        url = f'{self.base_url}/user'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            user_data = response.json()
            return user_data.get('login')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
            return None

    def get_my_repos(self, include_forks: bool = False, repo_type: str = 'all') -> List[Tuple[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            include_forks: –≤–∫–ª—é—á–∞—Ç—å —Ñ–æ—Ä–∫–∏ –∏–ª–∏ –Ω–µ—Ç
            repo_type: 'all', 'owner', 'public', 'private', 'member'
        """
        url = f'{self.base_url}/user/repos'
        params = {
            'type': repo_type,
            'per_page': 100,
            'sort': 'updated',
            'direction': 'desc'
        }
        
        all_repos = []
        page = 1
        
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        
        while True:
            params['page'] = page
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {response.status_code}")
                break
                
            repos = response.json()
            if not repos:
                break
            
            for repo in repos:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not include_forks and repo.get('fork', False):
                    continue
                
                all_repos.append((repo['owner']['login'], repo['name']))
            
            print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–∞–π–¥–µ–Ω–æ {len(repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
            page += 1
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 100:  # GitHub API –æ–±—ã—á–Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª–µ–µ 100 —Å—Ç—Ä–∞–Ω–∏—Ü
                break
        
        print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_repos)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        return all_repos

    def get_repo_license_from_api(self, owner: str, repo: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ GitHub API"""
        url = f'{self.base_url}/repos/{owner}/{repo}'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            repo_data = response.json()
            return repo_data.get('license')
        return None

    def get_repo_files(self, owner: str, repo: str, path: str = '') -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        url = f'{self.base_url}/repos/{owner}/{repo}/contents/{path}'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            return response.json()
        return []

    def get_file_content(self, owner: str, repo: str, file_path: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        url = f'{self.base_url}/repos/{owner}/{repo}/contents/{file_path}'
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            file_data = response.json()
            if file_data.get('content'):
                import base64
                content = base64.b64decode(file_data['content']).decode('utf-8', errors='ignore')
                return content
        return None

    def find_license_files(self, owner: str, repo: str) -> List[str]:
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        files = self.get_repo_files(owner, repo)
        license_files_found = []
        
        for file_info in files:
            if file_info['type'] == 'file' and file_info['name'] in self.license_files:
                license_files_found.append(file_info['name'])
        
        return license_files_found

    def analyze_license_content(self, content: str) -> Tuple[str, str]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        content_lower = content.lower()
        
        license_indicators = {
            'MIT': ['mit license', 'permission is hereby granted'],
            'Apache-2.0': ['apache license', 'version 2.0'],
            'GPL-3.0': ['gnu general public license', 'version 3'],
            'GPL-2.0': ['gnu general public license', 'version 2'],
            'BSD-3-Clause': ['bsd license', 'redistribution and use'],
            'BSD-2-Clause': ['bsd license', '2-clause'],
            'ISC': ['isc license', 'permission to use, copy, modify'],
            'Unlicense': ['unlicense', 'public domain'],
            'LGPL': ['lesser general public license', 'lgpl']
        }
        
        for license_type, indicators in license_indicators.items():
            if all(indicator in content_lower for indicator in indicators):
                return license_type, "high"
        
        # –ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É (–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
        for license_type, indicators in license_indicators.items():
            if any(indicator in content_lower for indicator in indicators):
                return license_type, "medium"
        
        return "Unknown", "low"

    def search_license_in_readme(self, owner: str, repo: str) -> Optional[Tuple[str, str]]:
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ README —Ñ–∞–π–ª–∞—Ö"""
        readme_files = ['README.md', 'README.rst', 'README.txt', 'README']
        
        for readme_file in readme_files:
            content = self.get_file_content(owner, repo, readme_file)
            if content:
                for pattern in self.license_patterns:
                    match = re.search(pattern, content)
                    if match:
                        license_mention = match.group(1).strip() if match.groups() else match.group(0)
                        return license_mention, "medium"
        
        return None

    def analyze_repository(self, owner: str, repo: str) -> LicenseInfo:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {owner}/{repo}...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GitHub API
        api_license = self.get_repo_license_from_api(owner, repo)
        if api_license:
            return LicenseInfo(
                has_license=True,
                license_type=api_license.get('name', 'Unknown'),
                license_file=api_license.get('key', ''),
                confidence="high",
                source="api"
            )
        
        # 2. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π
        license_files = self.find_license_files(owner, repo)
        if license_files:
            # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
            license_content = self.get_file_content(owner, repo, license_files[0])
            if license_content:
                license_type, confidence = self.analyze_license_content(license_content)
                return LicenseInfo(
                    has_license=True,
                    license_type=license_type,
                    license_file=license_files[0],
                    confidence=confidence,
                    source="file"
                )
        
        # 3. –ü–æ–∏—Å–∫ –≤ README —Ñ–∞–π–ª–∞—Ö
        readme_license = self.search_license_in_readme(owner, repo)
        if readme_license:
            return LicenseInfo(
                has_license=True,
                license_type=readme_license[0],
                license_file="README",
                confidence=readme_license[1],
                source="readme"
            )
        
        # 4. –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return LicenseInfo(
            has_license=False,
            confidence="high",
            source="none"
        )

    def analyze_multiple_repos(self, repo_list: List[Tuple[str, str]]) -> Dict[str, LicenseInfo]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        results = {}
        total = len(repo_list)
        
        for i, (owner, repo) in enumerate(repo_list, 1):
            print(f"[{i}/{total}] ", end="")
            try:
                results[f"{owner}/{repo}"] = self.analyze_repository(owner, repo)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {owner}/{repo}: {e}")
                results[f"{owner}/{repo}"] = LicenseInfo(
                    has_license=False,
                    confidence="unknown",
                    source="error"
                )
        
        return results

    def analyze_all_my_repos(self, include_forks: bool = False, repo_type: str = 'all') -> Dict[str, LicenseInfo]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = self.get_authenticated_user()
        if not username:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return {}
        
        print(f"üë§ –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        my_repos = self.get_my_repos(include_forks=include_forks, repo_type=repo_type)
        
        if not my_repos:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
            return {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        return self.analyze_multiple_repos(my_repos)

def print_license_report(results: Dict[str, LicenseInfo]):
    """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –ª–∏—Ü–µ–Ω–∑–∏—è—Ö"""
    print("\n" + "="*80)
    print("üìä –û–¢–ß–ï–¢ –û –õ–ò–¶–ï–ù–ó–ò–Ø–•")
    print("="*80)
    
    licensed_repos = []
    unlicensed_repos = []
    
    for repo_name, license_info in results.items():
        if license_info.has_license:
            licensed_repos.append((repo_name, license_info))
        else:
            unlicensed_repos.append((repo_name, license_info))
    
    print(f"\n‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π: {len(licensed_repos)}")
    print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏: {len(unlicensed_repos)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(licensed_repos) / len(results) * 100:.1f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ª–∏—Ü–µ–Ω–∑–∏–π
    license_stats = {}
    for _, license_info in licensed_repos:
        license_type = license_info.license_type or "Unknown"
        license_stats[license_type] = license_stats.get(license_type, 0) + 1
    
    if license_stats:
        print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ª–∏—Ü–µ–Ω–∑–∏–π:")
        for license_type, count in sorted(license_stats.items(), key=lambda x: x[1], reverse=True):
            print(f"   {license_type}: {count}")
    
    if licensed_repos:
        print(f"\n{'='*20} –õ–ò–¶–ï–ù–ó–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ò {'='*20}")
        for repo_name, license_info in licensed_repos:
            confidence_icon = {"high": "üü¢", "medium": "üü°", "low": "üü†", "unknown": "‚ö™"}
            source_icon = {"api": "üîó", "file": "üìÑ", "readme": "üìñ", "none": "‚ùå"}
            
            print(f"{confidence_icon.get(license_info.confidence, '‚ö™')} {repo_name}")
            print(f"   üìã –õ–∏—Ü–µ–Ω–∑–∏—è: {license_info.license_type}")
            print(f"   {source_icon.get(license_info.source, '‚ùì')} –ò—Å—Ç–æ—á–Ω–∏–∫: {license_info.source}")
            if license_info.license_file:
                print(f"   üìÅ –§–∞–π–ª: {license_info.license_file}")
            print()
    
    if unlicensed_repos:
        print(f"\n{'='*20} –†–ï–ü–û–ó–ò–¢–û–†–ò–ò –ë–ï–ó –õ–ò–¶–ï–ù–ó–ò–ò {'='*20}")
        for repo_name, license_info in unlicensed_repos:
            print(f"‚ùå {repo_name}")
        print()

def save_results_to_json(results: Dict[str, LicenseInfo], filename: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    if filename is None:
        filename = f"license_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    json_data = {}
    for repo_name, license_info in results.items():
        json_data[repo_name] = {
            'has_license': license_info.has_license,
            'license_type': license_info.license_type,
            'license_file': license_info.license_file,
            'confidence': license_info.confidence,
            'source': license_info.source
        }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    GITHUB_TOKEN = "your_github_token_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    
    analyzer = GitHubLicenseAnalyzer(GITHUB_TOKEN)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = analyzer.get_authenticated_user()
    if username:
        print(f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    print("\nüîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:")
    print("1. –í—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–∫–∏)")
    print("2. –¢–æ–ª—å–∫–æ –º–æ–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–±–µ–∑ —Ñ–æ—Ä–∫–æ–≤)")
    print("3. –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    print("4. –¢–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2: ").strip()
    
    if choice == "1":
        include_forks = True
        repo_type = 'all'
        print("üîÑ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–∫–∏)...")
    elif choice == "3":
        include_forks = False
        repo_type = 'public'
        print("üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    elif choice == "4":
        include_forks = False
        repo_type = 'private'
        print("üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
    else:
        include_forks = False
        repo_type = 'all'
        print("üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –≤–∞—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–±–µ–∑ —Ñ–æ—Ä–∫–æ–≤)...")
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    results = analyzer.analyze_all_my_repos(include_forks=include_forks, repo_type=repo_type)
    
    if results:
        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        print_license_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_choice = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª? (y/n): ").strip().lower()
        if save_choice in ['y', 'yes', '–¥–∞', '–¥']:
            save_results_to_json(results)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
