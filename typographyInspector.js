(() => {
  const issues = [];
  const seenFonts = new Map();

  document.querySelectorAll("*").forEach(el => {
    const style = getComputedStyle(el);
    const fontFamily = style.fontFamily;
    const fontSize = style.fontSize;
    const fontWeight = style.fontWeight;
    const lineHeight = style.lineHeight;

    const key = `${fontFamily} | ${fontSize} | ${fontWeight} | ${lineHeight}`;

    if (!seenFonts.has(key)) {
      seenFonts.set(key, []);
    }
    seenFonts.get(key).push(el);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  seenFonts.forEach((elements, key) => {
    const [fontFamily, fontSize, fontWeight, lineHeight] = key.split(" | ");

    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ "–ø—Ä–æ–±–ª–µ–º—ã"
    if (fontFamily.includes("serif") && fontFamily.includes("sans")) {
      issues.push({ type: "‚ö†Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞", detail: key, example: elements[0] });
    }
    if (parseFloat(lineHeight) < parseFloat(fontSize) * 1.2) {
      issues.push({ type: "üìè –ú–∞–ª–µ–Ω—å–∫–∏–π line-height", detail: key, example: elements[0] });
    }
    if (fontWeight === "100" || fontWeight === "900") {
      issues.push({ type: "üí° –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π font-weight", detail: key, example: elements[0] });
    }
    if (elements.length === 1) {
      issues.push({ type: "üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (—Ç–æ–ª—å–∫–æ —É 1 —ç–ª–µ–º–µ–Ω—Ç–∞)", detail: key, example: elements[0] });
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
  console.table(
    issues.map(issue => ({
      "–ü—Ä–æ–±–ª–µ–º–∞": issue.type,
      "–°—Ç–∏–ª–∏": issue.detail,
      "–ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç": `<${issue.example.tagName.toLowerCase()} class="${issue.example.className}">`
    }))
  );

  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
})();
